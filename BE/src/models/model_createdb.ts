import { newPool, pool } from '../db/connection';
import { connectPostgres } from '../constants';

export class Model_CreateDB {
    // Function to create a database
    public static createDatabase = async () => {
        const client = await newPool.connect();
        try {
        // Execute SQL command to create the database
        await client.query(`CREATE DATABASE ${connectPostgres.database};`);
        } finally {
        client.release();
        }
    };

    // Function to create a table
    public static createTable = async () => {
        const client = await pool.connect();
        try {
        // Execute SQL command to create the table
        await client.query(`
            CREATE TABLE "Users" (
            "id" int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "name" varchar,
            "email" varchar UNIQUE,
            "pass" varchar,
            "createdAt" timestamp,
            "updatedAt" timestamp
            );
            
            
            CREATE TABLE "Articles" (
            "id" int PRIMARY KEY,
            "title" varchar,
            "body" varchar,
            "minutesRead" varchar,
            "createdAt" timestamp,
            "updatedAt" timestamp
            );
            
            
            CREATE TABLE "Categories" (
            "name" varchar PRIMARY KEY
            );
            

            CREATE TABLE "ArticleAuthors" (
            "authorId" int  NOT NULL,
            "articleId" int  NOT NULL,
            "createdAt" timestamp  NOT NULL,
            "updatedAt" timestamp  NOT NULL,
            CONSTRAINT pk1 PRIMARY KEY ("authorId","articleId")
            );
            
            
            CREATE TABLE "ArticleCategories" (
            "articleId" int NOT NULL,
            "categoryName" varchar NOT NULL,
            CONSTRAINT pk2 PRIMARY KEY ("articleId","categoryName")
            );
        `);
        } finally {
        client.release();
        }
    };

    // Function to delete a table
    public static deleteTable = async () => {
    const client = await pool.connect();
    try {
        client.query(`
        DROP TABLE "Users";
        DROP TABLE "Articles";
        DROP TABLE "Categories";
        DROP TABLE "ArticleAuthors";
        DROP TABLE "ArticleCategories";
        `);
    } finally {
        client.release();
    }
    };
}