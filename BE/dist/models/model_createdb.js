"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model_CreateDB = void 0;
const connection_1 = require("../db/connection");
const constants_1 = require("../constants");
class Model_CreateDB {
}
exports.Model_CreateDB = Model_CreateDB;
_a = Model_CreateDB;
// Function to create a database
Model_CreateDB.createDatabase = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield connection_1.newPool.connect();
    try {
        // Execute SQL command to create the database
        yield client.query(`CREATE DATABASE ${constants_1.connectPostgres.database};`);
    }
    finally {
        client.release();
    }
});
// Function to create a table
Model_CreateDB.createTable = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield connection_1.pool.connect();
    try {
        // Execute SQL command to create the table
        yield client.query(`
            CREATE TABLE "Users" (
            "id" int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "name" varchar,
            "email" varchar UNIQUE,
            "pass" varchar,
            "createdAt" timestamp,
            "updatedAt" timestamp
            );
            
            
            CREATE TABLE "Articles" (
            "id" int PRIMARY KEY,
            "title" varchar,
            "body" varchar,
            "minutesRead" varchar,
            "createdAt" timestamp,
            "updatedAt" timestamp
            );
            
            
            CREATE TABLE "Categories" (
            "name" varchar PRIMARY KEY
            );
            

            CREATE TABLE "ArticleAuthors" (
            "authorId" int  NOT NULL,
            "articleId" int  NOT NULL,
            "createdAt" timestamp  NOT NULL,
            "updatedAt" timestamp  NOT NULL,
            CONSTRAINT pk1 PRIMARY KEY ("authorId","articleId")
            );
            
            
            CREATE TABLE "ArticleCategories" (
            "articleId" int NOT NULL,
            "categoryName" varchar NOT NULL,
            CONSTRAINT pk2 PRIMARY KEY ("articleId","categoryName")
            );
        `);
    }
    finally {
        client.release();
    }
});
// Function to delete a table
Model_CreateDB.deleteTable = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield connection_1.pool.connect();
    try {
        client.query(`
        DROP TABLE "Users";
        DROP TABLE "Articles";
        DROP TABLE "Categories";
        DROP TABLE "ArticleAuthors";
        DROP TABLE "ArticleCategories";
        `);
    }
    finally {
        client.release();
    }
});
